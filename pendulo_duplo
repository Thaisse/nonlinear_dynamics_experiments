import numpy as np
from scipy.integrate import solve_ivp
from deap import algorithms, base, creator, tools
import matplotlib.pyplot as plt

# 1. Modelo Físico do Pêndulo Duplo (Precisão Aprimorada)
def pendulo_duplo(t, y, L1, L2, m1, m2, g):
    theta1, omega1, theta2, omega2 = y
    
    delta = theta2 - theta1
    cdelta = np.cos(delta)
    den1 = (m1 + m2)*L1 - m2*L1*cdelta**2
    den2 = (L2/L1)*den1
    
    # Cálculos otimizados
    sd, cd = np.sin(delta), cdelta
    st1, st2 = np.sin(theta1), np.sin(theta2)
    
    # Equações diferenciais vetorizadas
    dw1 = (m2*L1*omega1**2*sd*cd + m2*g*st2*cd + 
           m2*L2*omega2**2*sd - (m1 + m2)*g*st1) / den1
    dw2 = (-m2*L2*omega2**2*sd*cd + (m1 + m2)*g*st1*cd - 
           (m1 + m2)*L1*omega1**2*sd - (m1 + m2)*g*st2) / den2
    
    return [omega1, dw1, omega2, dw2]

# 2. Configuração de Simulação de Alta Precisão
L1_real, L2_real = 1.0, 0.8
m1_real, m2_real = 1.0, 0.5
g_real = 9.81

# Intervalo de tempo maior com mais pontos
t_data = np.linspace(0, 15, 2000)  # 15 segundos, 2000 pontos
y0 = [np.pi/3, 0, np.pi/4, 0]  # Ângulos iniciais maiores para melhor observação

# Simulação de referência com alta precisão
sol_real = solve_ivp(pendulo_duplo, [0, 15], y0, 
                    args=(L1_real, L2_real, m1_real, m2_real, g_real),
                    t_eval=t_data, method='DOP853',  # Método de alta ordem
                    rtol=1e-10, atol=1e-10)  # Tolerâncias muito rigorosas

# Dados com ruído controlado (1%)
theta1_real = sol_real.y[0] + np.random.normal(0, 0.01, len(t_data))
theta2_real = sol_real.y[2] + np.random.normal(0, 0.01, len(t_data))

# 3. Algoritmo Genético Aprimorado
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)

toolbox = base.Toolbox()

# Intervalos mais restritos baseados em conhecimento prévio
toolbox.register("attr_L1", np.random.uniform, 0.9, 1.1)  # ±10% do real
toolbox.register("attr_L2", np.random.uniform, 0.72, 0.88)
toolbox.register("attr_m1", np.random.uniform, 0.85, 1.15)
toolbox.register("attr_m2", np.random.uniform, 0.45, 0.55)
toolbox.register("individual", tools.initCycle, creator.Individual,
                (toolbox.attr_L1, toolbox.attr_L2, toolbox.attr_m1, toolbox.attr_m2), n=1)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

def fitness(individual):
    L1, L2, m1, m2 = individual
    g = 9.81
    
    # Penalidades quadráticas mais rigorosas
    penalty = (max(0, abs(L1-1.0)-0.1)*100)**2 + \
              (max(0, abs(L2-0.8)-0.08)*100)**2 + \
              (max(0, abs(m1-1.0)-0.15)*100)**2 + \
              (max(0, abs(m2-0.5)-0.05)*100)**2
    
    try:
        # Foco na fase inicial (0-4 segundos)
        t_eval_fit = np.linspace(0, 4, 400)
        sol = solve_ivp(pendulo_duplo, [0, 4], y0, args=(L1, L2, m1, m2, g),
                       t_eval=t_eval_fit, method='DOP853',
                       rtol=1e-8, atol=1e-8)
        
        # Erro ponderado: 70% θ1, 30% θ2 (pois θ1 é mais sensível aos parâmetros)
        error = 0.7*np.mean((sol.y[0] - theta1_real[:400])**2) + \
                0.3*np.mean((sol.y[2] - theta2_real[:400])**2)
        
        return error + penalty,
    except:
        return 1e10,  # Penalidade maior para soluções inválidas

# Configuração do GA com operadores refinados
toolbox.register("evaluate", fitness)
toolbox.register("mate", tools.cxBlend, alpha=0.3)  # Crossover mais conservador
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=0.02, indpb=0.15)  # Mutação menor
toolbox.register("select", tools.selDoubleTournament, fitness_size=3, parsimony_size=1.2, fitness_first=True)

# Execução com população maior e mais gerações
pop = toolbox.population(n=300)
hof = tools.HallOfFame(5)
stats = tools.Statistics(lambda ind: ind.fitness.values)
stats.register("avg", np.mean)
stats.register("min", np.min)

result, log = algorithms.eaSimple(pop, toolbox, cxpb=0.6, mutpb=0.3, ngen=500, 
                                 stats=stats, halloffame=hof, verbose=True)
best_ag = hof[0]

# 4. Visualização e Análise dos Resultados
sol_ag = solve_ivp(pendulo_duplo, [0, 15], y0, 
                  args=(*best_ag, 9.81), t_eval=t_data, method='DOP853',
                  rtol=1e-10, atol=1e-10)

plt.figure(figsize=(16, 8))

# Gráfico de comparação
plt.plot(t_data[:800], theta1_real[:800], 'b-', 
         label=f"Real θ1 (L1={L1_real:.4f}, m1={m1_real:.4f})", alpha=0.7)
plt.plot(t_data[:800], theta2_real[:800], 'g-', 
         label=f"Real θ2 (L2={L2_real:.4f}, m2={m2_real:.4f})", alpha=0.7)
plt.plot(t_data[:800], sol_ag.y[0][:800], 'r--', 
         label=f"AG θ1 (L1={best_ag[0]:.4f}, m1={best_ag[2]:.4f})", linewidth=2)
plt.plot(t_data[:800], sol_ag.y[2][:800], 'm--', 
         label=f"AG θ2 (L2={best_ag[1]:.4f}, m2={best_ag[3]:.4f})", linewidth=2)


plt.xlabel("Tempo (s)", fontsize=12)
plt.ylabel("Ângulo (rad)", fontsize=12)
plt.title("Ajuste de Parâmetros do Pêndulo Duplo (Primeiros 8s)\nErro médio: θ1 = {:.2e}, θ2 = {:.2e}".format(
          np.mean((sol_ag.y[0][:400]-theta1_real[:400])**2),
          np.mean((sol_ag.y[2][:400]-theta2_real[:400])**2)), fontsize=14)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)

# Tabela de resultados com mais precisão
print("\n=== Resultados de Alta Precisão ===")
print(f"| {'Parâmetro':<8} | {'Valor Real':<12} | {'AG Estimado':<12} | {'Erro %':<10} | {'Limites':<12} |")
print("|----------|--------------|--------------|------------|------------|")
print(f"| L1       | {L1_real:<12.4f} | {best_ag[0]:<12.4f} | {abs(best_ag[0]-L1_real)/L1_real*100:<9.4f}% | [0.9, 1.1]   |")
print(f"| L2       | {L2_real:<12.4f} | {best_ag[1]:<12.4f} | {abs(best_ag[1]-L2_real)/L2_real*100:<9.4f}% | [0.72, 0.88] |")
print(f"| m1       | {m1_real:<12.4f} | {best_ag[2]:<12.4f} | {abs(best_ag[2]-m1_real)/m1_real*100:<9.4f}% | [0.85, 1.15] |")
print(f"| m2       | {m2_real:<12.4f} | {best_ag[3]:<12.4f} | {abs(best_ag[3]-m2_real)/m2_real*100:<9.4f}% | [0.45, 0.55] |")

plt.show()
